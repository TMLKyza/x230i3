#!/bin/sh
syncr_conf=.syncr
syncr_hysto=.hyst
pwd=$(pwd)
print_help () {
	printf "USAGE:\n"
	printf "help\n"
	printf "sync\n"
	printf "list\n"
	printf "backup [description]\n"
	printf "list-backup\n"
	printf "rollback [backup name]\n"
	printf "remove [file or list of files]\n"
	printf "new [list of files to sync] [path of sync]\n"
	printf "copy [path to sync from]\n"
	printf "add [file or list of files]\n"
}
create_syncr () {
	if [ -n "$1" ] || [ -n "$2" ];
	then
		files=$1
		case $2 in
		  /*) sync_to=$2;;
		  *) sync_to=$pwd/$2;;
		esac
		echo "sync_to="$sync_to>$syncr_conf
		for i in $files;
		do
			echo "sync_file="$i>>$syncr_conf
		done
	else
		print_help
	fi
}
add_files () {
	if [ -z "$1" ];
	then
		print_help
	else
		if [ ! -f $syncr_conf ];
		then
			echo "Create a new syncr first!"
		else
			files=$(ls $1|grep -v .*)
			for i in $files;
			do
				if [ -z "$(cat $syncr_conf|grep $i)" ];
				then
					echo "sync_file="$i>>$syncr_conf
					echo "adding "$i
				else
					echo $i" already in"
				fi
			done
		fi
	fi
}
list_changes(){
	if [ -f $syncr_conf ];
	then
		sync_to=$(cat $syncr_conf|grep 'sync_to'|cut -f2 -d'=')
		files=$(cat $syncr_conf|grep 'sync_file'|cut -f2 -d'=')
		output="name local remote\n"
		for i in $files;
		do
			nanoslocal=$(stat -c '%Y' $i)
			nanosremote=$(stat -c '%Y' $sync_to/$i)
			output=$output$i" "$(date -d "1970-01-01 + $nanoslocal secs" +%d-%m-%y@%H:%M:%S)" "$(date -d "1970-01-01 + $nanosremote secs" +%d-%m-%y@%H:%M:%S)"\n"
		done
			echo -e $output|column -t
	else
		echo "no syncr here!"
	fi
}
copy_from(){
	#check input
	if [ -z "$1" ];
	then
		print_help
	else
		copy_from=$1
	fi
	
	#copy data
	rsync -ah --progress $copy_from .

	#create syncr file
	dir=$(echo $copy_from|rev|cut -f1 -d'/'|rev)
	cd $dir
	create_syncr "$(ls|grep -v .*)" $copy_from
}
sync_dirs(){
	if [ -f $syncr_conf ];
	then
		sync_to=$(cat $syncr_conf|grep 'sync_to'|cut -f2 -d'=')
		files=$(cat $syncr_conf|grep 'sync_file'|cut -f2 -d'=')
		rmcmd="find "$sync_to" -type f "
		for i in $files;
		do
			if [ -f $sync_to/$i ];
			then
				if [ $i -nt $sync_to/$i ];
				then
					rsync -ah --progress $i $sync_to
				else
					rsync -ah --progress $sync_to/$i $i
				fi
			else
				rsync -ah --progress $i $sync_to/
			fi
			rmcmd=$rmcmd"-not -name '"$i"' "
		done
		rmcmd=$rmcmd"-delete"
		eval $rmcmd
	else
		echo "no syncr here!"
	fi
}
remove_file(){
	files=$(ls $1| grep -v .*)
	for i in $files;
	do
		cmd="sed '/"$1"/d' -i "$syncr_conf
		eval $cmd

	done
}
create_backup(){
	if [ -n "$1" ];
	then
		desc=$1
		sync_to=$(cat $syncr_conf | grep 'sync_to=' | cut -f2 -d'=')
		bckp_name=.bckp_$(date +%d-%m-%y@%H-%M-%S)
		echo $bckp_name"|"$desc >> $syncr_hysto
		cd $sync_to
		tar -cf $bckp_name *
	else
		print_help
	fi
}
list_backup(){
	if [ -f $syncr_hysto ];
	then
		msg="name|description\n"
		for i in $(cat $syncr_hysto);
		do
			msg=$msg$i"\n"
		done
		echo -e $msg|column -t -s'|'
	else
		echo "no backup file!"
	fi
}
rollback(){
	if [ -n "$1" ];
	then
		sync_to=$(cat $syncr_conf | grep 'sync_to=' | cut -f2 -d'=')
		bckp_name=$(ls -a $sync_to|grep -i $1)
		if [ -n "$bckp_name" ];
		then
			dirname=$(echo $bckp_name|cut -c1-)
			mkdir $dirname
			cd $dirname
			cp $sync_to/$bckp_name .
			tar -xf $bckp_name
			rm $bckp_name
		else
			echo "no match with:" $1
		fi
	else
		print_help
	fi
}
remove_backup(){
	if [ -n "$1" ];
	then
		sync_to=$(cat $syncr_conf | grep 'sync_to=' | cut -f2 -d'=')
		bckp_name=$(ls -a $sync_to|grep -i $1)
		if [ -n "$bckp_name" ];
		then
			cmd="sed '/"$bckp_name"/d' -i "$syncr_hysto
			eval $cmd
			cd $sync_to
			rm $bckp_name
			echo "removing: "$bckp_name
		else
			echo "no match with:" $1
		fi
	else
		print_help
	fi
}
case "$1" in 
	new) 
		files=$(ls $2| grep -v .*)
		create_syncr "$files" $3
		;;
	copy)
		copy_from $2
		;;
	add) 
		add_files $2
		;;
	list)
		list_changes
		;;
	sync)
		sync_dirs
		;;
	remove)
		remove_file $2
		;;
	backup)
		create_backup $2
		;;
	list-backup)
		list_backup
		;;
	rollback)
		rollback $2
		;;
	remove-backup)
		remove_backup $2
		;;
	*)
		print_help
esac
